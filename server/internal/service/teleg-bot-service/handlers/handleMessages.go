package handlers

import (
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"origin-tender-backend/server/internal/repository/mongodb"
	"strconv"
)

func HandleMessages(update tgbotapi.Update, bot *tgbotapi.BotAPI, repo mongodb.Repository) {

	//update.Message.Chat.Type
	//err := wsActions.SendAcceptParticipationInTender(update.SentFrom().ID, " sas", 223)
	// group

	if update.Message.Chat.Type == "group" {
		handleGroupMessages(update, bot, repo)
	} else {
		handlePrivateMessages(update, bot, repo)
	}

}

func handlePrivateMessages(update tgbotapi.Update, bot *tgbotapi.BotAPI, repo mongodb.Repository) {
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "no text")

	user, err := repo.GetUserByTgId(update.SentFrom().ID)
	if err != nil {
		fmt.Println("get user db error")
	}

	if user.UserId == 0 {
		userName := update.SentFrom().UserName
		fmt.Println(userName)
		msg.Text = "üëã –≠—Ç–æ –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π üëã\n —Å —Å–∞–π—Ç–∞ zakupku.mos.ru, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, \n –í–≤–µ–¥–∏—Ç–µ  –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω \n —Å —Å–∞–π—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ üåö"

		tgUser, _, _ := repo.CreateNewTgUser(update.SentFrom().ID, "", "")

		repo.UpdateUserStateById(tgUser.Id, "entering_token")

		bot.Send(msg)
		return
	}

	switch user.State {
	case "entering_name":
		tgUser, _, _ := repo.GetTgUser(update.Message.Text)

		if tgUser.UserId == 0 {
			repo.SetUserNameById(user.Id, update.Message.Text)
			msg.Text = "–≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω"
			repo.UpdateUserStateById(user.Id, "entering_name")
		} else {
			msg.Text = "—Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–µ, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è"

		}

	case "":
		token := update.Message.Text

		status, err := repo.ApproveProofToken(update.SentFrom().UserName, token)
		if err != nil {
			fmt.Println(err)
		}

		fmt.Println(update.SentFrom().UserName + " !!!!!!!!!!!!!!!!!!!")

		if status == "invalid token" {
			msg.Text = "–≤—ã —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–ª–∏—Å—å —Å —Å–µ—Ä–≤–∏—Å–æ–º, –∂–¥–∏—Ç–µ –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!!!"
			bot.Send(msg)
			return
		}

		repo.SetSiteId(status, user.Id)
		msg.Text = "–≤—ã —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–ª–∏—Å—å —Å —Å–µ—Ä–≤–∏—Å–æ–º, –∂–¥–∏—Ç–µ –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!"

		repo.UpdateUserStateById(user.Id, "main")
	}

	bot.Send(msg)
}

func handleGroupMessages(update tgbotapi.Update, bot *tgbotapi.BotAPI, repo mongodb.Repository) {

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "no text")

	groupUser, err := repo.GetUserByTgId(update.Message.Chat.ID)
	if err != nil {
		fmt.Println(err)
	}

	if groupUser.UserId == 0 {
		repo.CreateNewTgUser(update.Message.Chat.ID, update.Message.Chat.UserName, "")
		msg.Text = "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ —ç—Ç–æ –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n –æ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ zakupki.mos.ru,\n –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω —Å –≤–µ–±-–∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É \n id –≥—Ä—É–ø–ø—ã: " + strconv.Itoa(int(update.Message.Chat.ID))
	} else if groupUser.State != "main" {
		msg.Text = "–û—Ç–ª–∏—á–Ω–æ, –≤—ã –ø—Ä–∏–≤—è–∑–∞–ª–∏ –±–æ—Ç–∞ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É!"
		repo.UpdateUserStateById(groupUser.Id, "main")
	} else {
		msg.Text = "command not found"
	}

	bot.Send(msg)
}
